using Common_Classes.Common_Elements;
using Common_Classes;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace Taki_Game.Resources.Classes
{

    public static class Game
    {
        public static void checkWin(int players)
        {
            if (players == 2)
            {
                if (player1.DeckInHand.Count == 0)
                {
                    playerWin(player1);
                }
                if (player2.DeckInHand.Count == 0)
                {
                    playerWin(player2);
                }
            }
            if (players == 3)
            {
                if (player1.DeckInHand.Count == 0)
                {
                    playerWin(player1);
                }
                if (player2.DeckInHand.Count == 0)
                {
                    playerWin(player2);
                }
                if (player3.DeckInHand.Count == 0)
                {
                    playerWin(player4);
                }
            }
            if (players == 4)
            {

                if (player1.DeckInHand.Count == 0)
                {
                    playerWin(player1);

                }
                if (player2.DeckInHand.Count == 0)
                {
                    playerWin(player2);

                }
                if (player3.DeckInHand.Count == 0)
                {
                    playerWin(player3);

                }
                if (player4.DeckInHand.Count == 0)
                {
                    playerWin(player4);

                }
            }

        }
        public static void playerWin(Player_class player)
        {
            if (GlobalVars.Win == false)
            {
                GlobalVars.Win = true;
                MessageBox.Show($"{player.name} Wins", "Winner");
                int respose = Message_Box_Classes.DisplayMessageBox("Would you like to play again", "Player Again");
                if (respose == 1)
                {
                    foreach (Window window in Application.Current.Windows)
                    {
                        if (window.Name != "Index_Window" || window.Name != "GameWindow")
                        {
                            GlobalVars.InitilizeAllParameters();
                            StartGame(GlobalVars.NumOfPlayers);
                            window.Close();
                        }
                    }

                    StartGame(GlobalVars.NumOfPlayers);
                }
                else
                {
                    foreach (Window window in Application.Current.Windows)
                    {
                        if (window.Name != "Index_Window")
                        {
                            GlobalVars.InitilizeAllParameters();
                            StartGame(0, false);
                            window.Close();
                        }
                    }
                }
            }
        }
        public static List<Player_class> players = new List<Player_class>();

        public static Player_class player1 { get; set; } = new Player_class();
        public static Player_class player2 { get; set; } = new Player_class();
        public static Player_class player3 { get; set; } = new Player_class();
        public static Player_class player4 { get; set; } = new Player_class();

        public static void SetPlayerName(Player_class player, bool initilize)
        {
            if (initilize)
            {
                var number_of_field = 1;
                var title = $"Insert Name of player {player.index}";
                var Input_field = new Common_Classes.Input_box_field();
                Input_field.Input_label = "Enter name:";
                var input_Box = new Input_box(number_of_field, title, Input_field);
                input_Box.ShowDialog();
                player.name = UniversalVars.inputBoxReturn[0].ToString();
            }
        }

        public static void StartGame(int players, bool initilaize = true)
        {
            GlobalVars.Win = false;
            GlobalVars.player = 1;
            GlobalVars.setDeck();
            if (players == 0)
            {
                player1.index = 1;
                player2.index = 2;
                player3.index = 3;
                player4.index = 4;
                player1.DeckInHand = new List<TakiCard>();
                player2.DeckInHand = new List<TakiCard>();
                player3.DeckInHand = new List<TakiCard>();
                player4.DeckInHand = new List<TakiCard>();
                GetCards(player1);
                GetCards(player2);
                GetCards(player3);
                GetCards(player4);
            }

            if (players == 2)
            {
                player1.index = 1;
                player2.index = 2;
                SetPlayerName(player1, initilaize);
                SetPlayerName(player2, initilaize);
                player1.DeckInHand = new List<TakiCard>();
                player2.DeckInHand = new List<TakiCard>();
                GetCards(player1);
                GetCards(player2);
            }
            if (players == 3)
            {
                player1.index = 1;
                player2.index = 2;
                player3.index = 3;
                SetPlayerName(player1, initilaize);
                SetPlayerName(player2, initilaize);
                SetPlayerName(player3, initilaize);
                player1.DeckInHand = new List<TakiCard>();
                player2.DeckInHand = new List<TakiCard>();
                player3.DeckInHand = new List<TakiCard>();
                GetCards(player1);
                GetCards(player2);
                GetCards(player3);
            }
            if (players == 4)
            {
                player1.index = 1;
                player2.index = 2;
                player3.index = 3;
                player4.index = 4;
                SetPlayerName(player1, initilaize);
                SetPlayerName(player2, initilaize);
                SetPlayerName(player3, initilaize);
                SetPlayerName(player4, initilaize);
                player1.DeckInHand = new List<TakiCard>();
                player2.DeckInHand = new List<TakiCard>();
                player3.DeckInHand = new List<TakiCard>();
                player4.DeckInHand = new List<TakiCard>();
                GetCards(player1);
                GetCards(player2);
                GetCards(player3);
                GetCards(player4);
            }
            GlobalVars.nextCardOutStack(GlobalVars.activeDeck[0]);
            GlobalVars.activeDeck.Remove(GlobalVars.activeDeck[0]);
            GlobalVars.closeTaki();
            GlobalVars.Plus2Active = false;
            GlobalVars.Plus2Accumulation = 0;
        }

        public static void GetCards(Player_class player)
        {
            for (int i = 0; i < 8; i++)
            {
                DrawCard(player);
            }

        }

        public static void DrawCard(Player_class player, bool inTurn = false)
        {

            if (GlobalVars.activeDeck.Count <= 1)
            {
                reShuffleStack();
            }
            GlobalVars.activeDeck[0].GiveCard(player.index);
            player.DeckInHand.Add(GlobalVars.activeDeck[0]);
            GlobalVars.activeDeck.Remove(GlobalVars.activeDeck[0]);
            if (inTurn)
            {
                GlobalVars.nextPlayer();
            }

        }

        public static void PeneltyDraw(Player_class player)
        {
            if (GlobalVars.activeDeck.Count > GlobalVars.Plus2Accumulation)
            {
                for (int i = 0; i < GlobalVars.Plus2Accumulation; i++)
                {
                    DrawCard(player);
                }
            }
            else
            {
                reShuffleStack();
                for (int i = 0; i < GlobalVars.Plus2Accumulation; i++)
                {
                    DrawCard(player);
                }

            }
            GlobalVars.Plus2Accumulation = 0;
            GlobalVars.nextPlayer();
        }

        public static void reShuffleStack()
        {
            GlobalVars.setDeck();
            foreach (TakiCard takiCard in player1.DeckInHand)
            {
                RemoveCardFromDeck(takiCard);
            }
            foreach (TakiCard takiCard in player2.DeckInHand)
            {
                RemoveCardFromDeck(takiCard);
            }
            foreach (TakiCard takiCard in player3.DeckInHand)
            {
                RemoveCardFromDeck(takiCard);
            }
            foreach (TakiCard takiCard in player4.DeckInHand)
            {
                RemoveCardFromDeck(takiCard);
            }
            RemoveCardFromDeck(GlobalVars.lastCardInStack);

        }

        public static void RemoveCardFromDeck(TakiCard takiCard)
        {
            TakiCard cardToRemove = GlobalVars.activeDeck.Find(card => card.Pic == takiCard.Pic);
            if (cardToRemove != null)
            {
                GlobalVars.activeDeck.Remove(cardToRemove);
            }
        }
    }

}
